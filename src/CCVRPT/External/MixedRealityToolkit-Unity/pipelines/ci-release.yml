# CI build for release packages.

# Change the BuildNumber to be SemVer 1.0.0 compatible
name: $(Date:yyyyMMdd)v$(Rev:r)

variables:
- template: config/settings.yml

resources:
  repositories:
  - repository: build-tools
    type: git
    name: Analog/$(ToolsRepoName)
    ref: mrtk

jobs:
- job: CIReleaseValidation
  timeoutInMinutes: 90
  pool:
    name: Analog N-1
    demands:
    - ${{ variables.Unity2018VersionInternal }}
    - COG-UnityCache-WUS2-01
    - SDK_18362 -equals TRUE
  steps:
  - template: templates/compilemsbuild.yml
    parameters:
      UnityVersion: $(Unity2018VersionInternal)
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\NuGet'
      ArtifactName: 'NuGet'
  - template: templates/end.yml

- job: ReleaseSigning
  dependsOn: CIReleaseValidation
  timeoutInMinutes: 90
  pool:
    name: Package ES Lab E
  steps:
  - checkout: self
  - checkout: build-tools
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'NuGet'
      downloadPath: '$(Build.SourcesDirectory)'

  - powershell: |
      $(ToolsDir)/generateSignConfigs.ps1 -Directory $(Build.SourcesDirectory)/NuGet -OutputDirectory $(Build.ArtifactStagingDirectory)/configs
    displayName: "Generate signing configs"

  # required for code signing
  - task: ComponentGovernanceComponentDetection@0
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'

  # sign all DLLs
  - template: templates/tasks/signing.yml
    parameters:
      ConfigName: "$(Build.ArtifactStagingDirectory)/configs/MRTKSignConfig.xml"

  # Create pre-release packages
  - ${{ if eq(variables['MRTKReleaseTag'], '') }}:
    - template: templates/package.yml
      parameters:
        version: '$(MRTKVersion)-$(Build.BuildNumber)'
        packDestination: '$(Build.SourcesDirectory)\artifacts\prerelease'
  - ${{ if ne(variables['MRTKReleaseTag'], '') }}:
    - template: templates/package.yml
      parameters:
        version: '$(MRTKVersion)-$(Build.BuildNumber).$(MRTKReleaseTag)'
        packDestination: '$(Build.SourcesDirectory)\artifacts\prerelease'

  # Create release packages
  - ${{ if eq(variables['MRTKReleaseTag'], '') }}:
    - template: templates/package.yml
      parameters:
        version: '$(MRTKVersion)'
        packDestination: '$(Build.SourcesDirectory)\artifacts\release'
  - ${{ if ne(variables['MRTKReleaseTag'], '') }}:
    - template: templates/package.yml
      parameters:
        version: '$(MRTKVersion)-$(MRTKReleaseTag)'
        packDestination: '$(Build.SourcesDirectory)\artifacts\release'        

  - template: templates/tasks/signing.yml
    parameters:
      ConfigName: "$(Build.ArtifactStagingDirectory)/configs/MRTKNuGetSignConfig.xml"

  - task: NuGetToolInstaller@1
    displayName: 'Ensure NuGet.exe is installed and in PATH'

  - task: PowerShell@2
    displayName: 'Validate release packages are signed'
    inputs:
      targetType: filePath
      filePath: '$(ToolsDir)\signCheck.ps1'
      arguments: '$(Build.SourcesDirectory)\artifacts\release -tmpDir $(Build.ArtifactStagingDirectory)'
  
  - powershell: |
      Remove-Item "$(Build.SourcesDirectory)/artifacts/release/Microsoft.MixedReality.Toolkit.Tests.*" -Exclude "*.Utilities.*"
    displayName: "Delete MixedReality.Toolkit.Tests package from the release artifacts"

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Packages'
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\artifacts'
      ArtifactName: 'mrtk-unity-packages'

  - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2  # NuGetCommand
    displayName: 'NuGet push'
    inputs:
      command: push
      packagesToPush: '$(Build.SourcesDirectory)/artifacts/prerelease/**/*.nupkg;!$(Build.SourcesDirectory)/artifacts/prerelease/**/*.symbols.nupkg'
      publishVstsFeed: '$(NuGetFeedId)'
      buildProperties: 'version=$(MRTKVersion)-$(Build.BuildNumber)'
